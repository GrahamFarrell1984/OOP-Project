/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gaaticketsapplication;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author grahamfarrell
 * @author richard schmidt de almeida
 * @author boris figeczky
 * 
 */
public class GaaTicketsApplicationGUI extends javax.swing.JFrame {
    
    ArrayList<Tickets> tickets;
    int ticketList;

    /**
     * Creates new form GaaTicketsApplicationGUI
     */
    public GaaTicketsApplicationGUI() {
        initComponents();
        
        tickets = new ArrayList<Tickets>();
        ticketList = 0;
        
        // This code sets the visibility of parts of the GUI and sets certain parts of the GUI to not be enabled even though they are visible when the GUI opens up
        
        footballRadioButton.setEnabled(false);
        hurlingRadioButton.setEnabled(false);
        
        numAdultTicketsLabel.setEnabled(false);
        adultTicketComboBox.setEnabled(false);
        numChildTicketsLabel.setEnabled(false);
        childTicketComboBox.setEnabled(false);
        
        adultTicketLabel.setVisible(false);
        adultTicketPriceTextField.setVisible(false);
        
        childTicketLabel.setVisible(false);
        childTicketPriceTextField.setVisible(false);
        
        customerNameLabel.setEnabled(false);
        nameTextField.setEnabled(false);
        customerEmailLabel.setEnabled(false);
        emailTextField.setEnabled(false);
        ticketDetailsLabel.setEnabled(false);
        ticketDetailsTextField.setEnabled(false);
        
        viewButton.setEnabled(false);
        sellButton.setEnabled(false);
        buyButton.setEnabled(false);
        clearButton.setEnabled(false);
        deleteButton.setEnabled(false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        upperPanel = new javax.swing.JPanel();
        titlePanel = new javax.swing.JPanel();
        mainTitle = new javax.swing.JLabel();
        lowerPanel = new javax.swing.JPanel();
        buyOrSellPanel = new javax.swing.JPanel();
        subtitle1 = new javax.swing.JLabel();
        sellRadioButton = new javax.swing.JRadioButton();
        buyRadioButton = new javax.swing.JRadioButton();
        viewRadioButton = new javax.swing.JRadioButton();
        typeOfTicketPanel = new javax.swing.JPanel();
        subtitle2 = new javax.swing.JLabel();
        footballRadioButton = new javax.swing.JRadioButton();
        hurlingRadioButton = new javax.swing.JRadioButton();
        numberOfTicketsPanel = new javax.swing.JPanel();
        subtitle3 = new javax.swing.JLabel();
        numAdultTicketsLabel = new javax.swing.JLabel();
        adultTicketComboBox = new javax.swing.JComboBox<>();
        numChildTicketsLabel = new javax.swing.JLabel();
        childTicketComboBox = new javax.swing.JComboBox<>();
        adultTicketLabel = new javax.swing.JLabel();
        adultTicketPriceTextField = new javax.swing.JTextField();
        childTicketLabel = new javax.swing.JLabel();
        childTicketPriceTextField = new javax.swing.JTextField();
        customerDetailsPanel = new javax.swing.JPanel();
        subtitle4 = new javax.swing.JLabel();
        customerNameLabel = new javax.swing.JLabel();
        nameTextField = new javax.swing.JTextField();
        customerEmailLabel = new javax.swing.JLabel();
        emailTextField = new javax.swing.JTextField();
        ticketDetailsTextField = new javax.swing.JTextField();
        ticketDetailsLabel = new javax.swing.JLabel();
        buttonsPanel = new javax.swing.JPanel();
        viewButton = new javax.swing.JButton();
        sellButton = new javax.swing.JButton();
        buyButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("GAA Ticket Application");
        setBackground(new java.awt.Color(255, 255, 255));
        setBounds(new java.awt.Rectangle(0, 0, 734, 506));
        setLocation(new java.awt.Point(0, 0));
        setMinimumSize(new java.awt.Dimension(734, 506));
        setPreferredSize(new java.awt.Dimension(734, 506));
        setResizable(false);
        setSize(new java.awt.Dimension(734, 506));

        upperPanel.setBackground(new java.awt.Color(255, 255, 255));
        upperPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204), 2));

        titlePanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204), 2));

        mainTitle.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        mainTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        mainTitle.setText("GAA TICKETS");

        javax.swing.GroupLayout titlePanelLayout = new javax.swing.GroupLayout(titlePanel);
        titlePanel.setLayout(titlePanelLayout);
        titlePanelLayout.setHorizontalGroup(
            titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(titlePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        titlePanelLayout.setVerticalGroup(
            titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(titlePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout upperPanelLayout = new javax.swing.GroupLayout(upperPanel);
        upperPanel.setLayout(upperPanelLayout);
        upperPanelLayout.setHorizontalGroup(
            upperPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(upperPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titlePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        upperPanelLayout.setVerticalGroup(
            upperPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(upperPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titlePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        lowerPanel.setBackground(new java.awt.Color(255, 255, 255));
        lowerPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204), 2));

        buyOrSellPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204), 2));
        buyOrSellPanel.setPreferredSize(new java.awt.Dimension(190, 104));

        subtitle1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        subtitle1.setText("Buy, Sell Or View Tickets");

        buttonGroup1.add(sellRadioButton);
        sellRadioButton.setText("Sell Tickets");
        sellRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sellRadioButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(buyRadioButton);
        buyRadioButton.setText("Buy Tickets");
        buyRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyRadioButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(viewRadioButton);
        viewRadioButton.setText("View Tickets");
        viewRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewRadioButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buyOrSellPanelLayout = new javax.swing.GroupLayout(buyOrSellPanel);
        buyOrSellPanel.setLayout(buyOrSellPanelLayout);
        buyOrSellPanelLayout.setHorizontalGroup(
            buyOrSellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buyOrSellPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(buyOrSellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(subtitle1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(buyOrSellPanelLayout.createSequentialGroup()
                        .addComponent(sellRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buyRadioButton)
                        .addGap(181, 181, 181)
                        .addComponent(viewRadioButton)))
                .addContainerGap())
        );
        buyOrSellPanelLayout.setVerticalGroup(
            buyOrSellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buyOrSellPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(subtitle1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(buyOrSellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sellRadioButton)
                    .addComponent(buyRadioButton)
                    .addComponent(viewRadioButton))
                .addContainerGap())
        );

        typeOfTicketPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204), 2));
        typeOfTicketPanel.setPreferredSize(new java.awt.Dimension(190, 104));

        subtitle2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        subtitle2.setText("Type Of Ticket");

        buttonGroup2.add(footballRadioButton);
        footballRadioButton.setText("Football");
        footballRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                footballRadioButtonActionPerformed(evt);
            }
        });

        buttonGroup2.add(hurlingRadioButton);
        hurlingRadioButton.setText("Hurling");
        hurlingRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hurlingRadioButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout typeOfTicketPanelLayout = new javax.swing.GroupLayout(typeOfTicketPanel);
        typeOfTicketPanel.setLayout(typeOfTicketPanelLayout);
        typeOfTicketPanelLayout.setHorizontalGroup(
            typeOfTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(typeOfTicketPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(typeOfTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(subtitle2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(typeOfTicketPanelLayout.createSequentialGroup()
                        .addComponent(footballRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(hurlingRadioButton)))
                .addContainerGap())
        );
        typeOfTicketPanelLayout.setVerticalGroup(
            typeOfTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(typeOfTicketPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(subtitle2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(typeOfTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(footballRadioButton)
                    .addComponent(hurlingRadioButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        numberOfTicketsPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204), 2));
        numberOfTicketsPanel.setPreferredSize(new java.awt.Dimension(190, 104));

        subtitle3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        subtitle3.setText("Tickets");

        numAdultTicketsLabel.setText("Number Of Adult Tickets:");

        adultTicketComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0" }));
        adultTicketComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adultTicketComboBoxActionPerformed(evt);
            }
        });

        numChildTicketsLabel.setText("Number Of Child Tickets:");

        childTicketComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0" }));
        childTicketComboBox.setToolTipText("");
        childTicketComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                childTicketComboBoxActionPerformed(evt);
            }
        });

        adultTicketLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        adultTicketLabel.setText("Adult Ticket Price: €");

        adultTicketPriceTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adultTicketPriceTextFieldActionPerformed(evt);
            }
        });

        childTicketLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        childTicketLabel.setText("Child Ticket Price: €");

        childTicketPriceTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                childTicketPriceTextFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout numberOfTicketsPanelLayout = new javax.swing.GroupLayout(numberOfTicketsPanel);
        numberOfTicketsPanel.setLayout(numberOfTicketsPanelLayout);
        numberOfTicketsPanelLayout.setHorizontalGroup(
            numberOfTicketsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(numberOfTicketsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(numberOfTicketsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(subtitle3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, numberOfTicketsPanelLayout.createSequentialGroup()
                        .addGroup(numberOfTicketsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(numberOfTicketsPanelLayout.createSequentialGroup()
                                .addComponent(numAdultTicketsLabel)
                                .addGap(18, 18, 18)
                                .addComponent(adultTicketComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(numberOfTicketsPanelLayout.createSequentialGroup()
                                .addComponent(adultTicketLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(adultTicketPriceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(numberOfTicketsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(numberOfTicketsPanelLayout.createSequentialGroup()
                                .addComponent(childTicketLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(childTicketPriceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(numberOfTicketsPanelLayout.createSequentialGroup()
                                .addComponent(numChildTicketsLabel)
                                .addGap(18, 18, 18)
                                .addComponent(childTicketComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        numberOfTicketsPanelLayout.setVerticalGroup(
            numberOfTicketsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(numberOfTicketsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(subtitle3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(numberOfTicketsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(adultTicketComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(numChildTicketsLabel)
                    .addComponent(childTicketComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(numAdultTicketsLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(numberOfTicketsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(adultTicketLabel)
                    .addComponent(adultTicketPriceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(childTicketPriceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(childTicketLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        customerDetailsPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204), 2));

        subtitle4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        subtitle4.setText("Customer & Ticket Details");

        customerNameLabel.setText("Customer Name:");

        nameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameTextFieldActionPerformed(evt);
            }
        });

        customerEmailLabel.setText("Customer Email:");

        emailTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailTextFieldActionPerformed(evt);
            }
        });

        ticketDetailsTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ticketDetailsTextFieldActionPerformed(evt);
            }
        });

        ticketDetailsLabel.setText("Ticket Details:");

        javax.swing.GroupLayout customerDetailsPanelLayout = new javax.swing.GroupLayout(customerDetailsPanel);
        customerDetailsPanel.setLayout(customerDetailsPanelLayout);
        customerDetailsPanelLayout.setHorizontalGroup(
            customerDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customerDetailsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(customerDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(subtitle4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(customerDetailsPanelLayout.createSequentialGroup()
                        .addGroup(customerDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(customerNameLabel)
                            .addComponent(ticketDetailsLabel))
                        .addGap(18, 18, 18)
                        .addGroup(customerDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(customerDetailsPanelLayout.createSequentialGroup()
                                .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(customerEmailLabel)
                                .addGap(18, 18, 18)
                                .addComponent(emailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(ticketDetailsTextField))))
                .addContainerGap())
        );
        customerDetailsPanelLayout.setVerticalGroup(
            customerDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customerDetailsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(subtitle4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(customerDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customerNameLabel)
                    .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(emailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(customerEmailLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(customerDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ticketDetailsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ticketDetailsLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        buttonsPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204), 2));

        viewButton.setText("View");
        viewButton.setSize(new java.awt.Dimension(75, 29));
        viewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewButtonActionPerformed(evt);
            }
        });

        sellButton.setText("Sell");
        sellButton.setSize(new java.awt.Dimension(75, 29));
        sellButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sellButtonActionPerformed(evt);
            }
        });

        buyButton.setText("Buy");
        buyButton.setSize(new java.awt.Dimension(75, 29));
        buyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyButtonActionPerformed(evt);
            }
        });

        clearButton.setText("Clear");
        clearButton.setMaximumSize(new java.awt.Dimension(75, 29));
        clearButton.setMinimumSize(new java.awt.Dimension(75, 29));
        clearButton.setPreferredSize(new java.awt.Dimension(75, 29));
        clearButton.setSize(new java.awt.Dimension(75, 29));
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.setSize(new java.awt.Dimension(75, 29));
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        exitButton.setText("Exit");
        exitButton.setSize(new java.awt.Dimension(75, 29));
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buttonsPanelLayout = new javax.swing.GroupLayout(buttonsPanel);
        buttonsPanel.setLayout(buttonsPanelLayout);
        buttonsPanelLayout.setHorizontalGroup(
            buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(viewButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(sellButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(buyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        buttonsPanelLayout.setVerticalGroup(
            buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(viewButton)
                    .addComponent(deleteButton)
                    .addComponent(sellButton)
                    .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buyButton)
                    .addComponent(exitButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout lowerPanelLayout = new javax.swing.GroupLayout(lowerPanel);
        lowerPanel.setLayout(lowerPanelLayout);
        lowerPanelLayout.setHorizontalGroup(
            lowerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, lowerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(lowerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(customerDetailsPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(typeOfTicketPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 706, Short.MAX_VALUE)
                    .addComponent(numberOfTicketsPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 706, Short.MAX_VALUE)
                    .addComponent(buyOrSellPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 706, Short.MAX_VALUE)
                    .addComponent(buttonsPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        lowerPanelLayout.setVerticalGroup(
            lowerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lowerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(buyOrSellPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(typeOfTicketPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(numberOfTicketsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(customerDetailsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(upperPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lowerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(upperPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lowerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // This is a method to clear all text fields
    
    private void clearFields() {
        
        adultTicketPriceTextField.setText("");
        childTicketPriceTextField.setText("");
        nameTextField.setText("");
        emailTextField.setText("");
        ticketDetailsTextField.setText("");
        
    }
    
    private void sellRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sellRadioButtonActionPerformed
        
        // This code sets the visibility of parts of the GUI and sets certain parts of the GUI to be enabled or not enabled when the sell radio button is selected
        
        footballRadioButton.setEnabled(true);
        hurlingRadioButton.setEnabled(true);
        
        numAdultTicketsLabel.setEnabled(false);
        adultTicketComboBox.setEnabled(false);
        numChildTicketsLabel.setEnabled(false);
        childTicketComboBox.setEnabled(false);
        
        adultTicketLabel.setVisible(true);
        adultTicketPriceTextField.setVisible(true);
        
        childTicketLabel.setVisible(true);
        childTicketPriceTextField.setVisible(true);
        
        adultTicketLabel.setEnabled(false);
        adultTicketPriceTextField.setEnabled(false);
        
        childTicketLabel.setEnabled(false);
        childTicketPriceTextField.setEnabled(false);
        
        customerNameLabel.setEnabled(false);
        nameTextField.setEnabled(false);
        customerEmailLabel.setEnabled(false);
        emailTextField.setEnabled(false);
        ticketDetailsLabel.setEnabled(false);
        ticketDetailsTextField.setEnabled(false);
        
        viewButton.setEnabled(false);
        sellButton.setEnabled(false);
        buyButton.setEnabled(false);
        clearButton.setEnabled(true);
        deleteButton.setEnabled(false);
        
        // When the sell radio button is selected it resets the football and hurling radio buttons to unselected
        
        buttonGroup2.clearSelection();
        
        // When the sell radio button is selected it increases the amount of adult and child tickets that can be sold to a maximum of 8
        
        adultTicketComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8" }));
        
        childTicketComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8" }));
        
        // When the sell radio button is selected it resets all of the text fields to empty
        
        clearFields();
        
    }//GEN-LAST:event_sellRadioButtonActionPerformed

    private void buyRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyRadioButtonActionPerformed
        
        // This code sets the visibility of parts of the GUI and sets certain parts of the GUI to be enabled or not enabled when the buy radio button is selected
        
        footballRadioButton.setEnabled(true);
        hurlingRadioButton.setEnabled(true);
        
        numAdultTicketsLabel.setEnabled(false);
        adultTicketComboBox.setEnabled(false);
        numChildTicketsLabel.setEnabled(false);
        childTicketComboBox.setEnabled(false);
        
        adultTicketLabel.setVisible(false);
        adultTicketPriceTextField.setVisible(false);
        
        childTicketLabel.setVisible(false);
        childTicketPriceTextField.setVisible(false);
        
        adultTicketLabel.setEnabled(true);
        adultTicketPriceTextField.setEnabled(false);
        
        childTicketLabel.setEnabled(true);
        childTicketPriceTextField.setEnabled(false);
        
        nameTextField.setEnabled(false);
        emailTextField.setEnabled(false);
        ticketDetailsTextField.setEnabled(false);
        
        viewButton.setEnabled(false);
        sellButton.setEnabled(false);
        buyButton.setEnabled(false);
        clearButton.setEnabled(true);
        
        // When the buy radio button is selected it resets the football and hurling radio buttons to unselected
        
        buttonGroup2.clearSelection();
        
        // When the buy radio button is selected it decreases the amount of adult and child tickets that can be bought to a maximum of 4
        
        adultTicketComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4" }));
        
        childTicketComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4" }));
        
        // When the buy radio button is selected it resets all of the text fields to empty
        
        clearFields();
        
    }//GEN-LAST:event_buyRadioButtonActionPerformed

    private void viewRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewRadioButtonActionPerformed
        
        footballRadioButton.setEnabled(false);
        hurlingRadioButton.setEnabled(false);
        
        customerNameLabel.setEnabled(true);
        nameTextField.setEnabled(true);
        customerEmailLabel.setEnabled(true);
        emailTextField.setEnabled(true);
        
        viewButton.setEnabled(true);
        clearButton.setEnabled(true);
        deleteButton.setEnabled(true);
        
    }//GEN-LAST:event_viewRadioButtonActionPerformed

    private void footballRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_footballRadioButtonActionPerformed
        
        if (buyRadioButton.isSelected()) {
            
            // This code sets the visibility of parts of the GUI and sets certain parts of the GUI to be enabled or not enabled when the buy radio button and football radio button are both selected
            
            footballRadioButton.setEnabled(true);
            hurlingRadioButton.setEnabled(true);
            
            numAdultTicketsLabel.setEnabled(true);
            adultTicketComboBox.setEnabled(true);
            numChildTicketsLabel.setEnabled(true);
            childTicketComboBox.setEnabled(true);
            
            adultTicketLabel.setEnabled(false);
            adultTicketPriceTextField.setEnabled(false);
            childTicketLabel.setEnabled(false);
            childTicketPriceTextField.setEnabled(false);
            
            nameTextField.setEnabled(false);
            emailTextField.setEnabled(false);
            ticketDetailsTextField.setEnabled(false);
            
            viewButton.setEnabled(true);
            sellButton.setEnabled(false);
            buyButton.setEnabled(true);
            clearButton.setEnabled(true);
            deleteButton.setEnabled(false);
            
            // When the buy radio button and football radio button are both selected it decreases the amount of adult and child tickets that can be bought to a maximum of 4
            
            adultTicketComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4" }));
            
            childTicketComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4" }));
            
            // When the buy radio button and football radio button are both selected it resets all of the text fields to empty
            
            clearFields();
            
        }
        
        else {
            
            footballRadioButton.setEnabled(true);
            hurlingRadioButton.setEnabled(true);
            
            numAdultTicketsLabel.setEnabled(true);
            adultTicketComboBox.setEnabled(true);
            numChildTicketsLabel.setEnabled(true);
            childTicketComboBox.setEnabled(true);
            
            adultTicketLabel.setEnabled(false);
            adultTicketPriceTextField.setEnabled(false);
            childTicketLabel.setEnabled(false);
            childTicketPriceTextField.setEnabled(false);
            
            nameTextField.setEnabled(false);
            emailTextField.setEnabled(false);
            ticketDetailsTextField.setEnabled(false);
            
            viewButton.setEnabled(false);
            sellButton.setEnabled(false);
            buyButton.setEnabled(false);
            clearButton.setEnabled(true);
            deleteButton.setEnabled(false);
            
            adultTicketComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8" }));
            
            childTicketComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8" }));
            
            clearFields();
            
        }
        
    }//GEN-LAST:event_footballRadioButtonActionPerformed

    private void hurlingRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hurlingRadioButtonActionPerformed
        
        if (buyRadioButton.isSelected()) {
            
            // This code sets the visibility of parts of the GUI and sets certain parts of the GUI to be enabled or not enabled when the buy radio button and hurling radio button are both selected
            
            footballRadioButton.setEnabled(true);
            hurlingRadioButton.setEnabled(true);
            
            numAdultTicketsLabel.setEnabled(true);
            adultTicketComboBox.setEnabled(true);
            numChildTicketsLabel.setEnabled(true);
            childTicketComboBox.setEnabled(true);
            
            adultTicketLabel.setEnabled(false);
            adultTicketPriceTextField.setEnabled(false);
            childTicketLabel.setEnabled(false);
            childTicketPriceTextField.setEnabled(false);
            
            nameTextField.setEnabled(false);
            emailTextField.setEnabled(false);
            ticketDetailsTextField.setEnabled(false);
            
            viewButton.setEnabled(true);
            sellButton.setEnabled(false);
            buyButton.setEnabled(true);
            clearButton.setEnabled(true);
            deleteButton.setEnabled(false);
            
            // When the buy radio button and football radio button are both selected it decreases the amount of adult and child tickets that can be bought to a maximum of 4
            
            adultTicketComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4" }));
            
            childTicketComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4" }));
            
            // When the buy radio button and hurling radio button are both selected it resets all of the text fields to empty
            
            clearFields();
            
        }
        
        else {
            
            footballRadioButton.setEnabled(true);
            hurlingRadioButton.setEnabled(true);
            
            numAdultTicketsLabel.setEnabled(true);
            adultTicketComboBox.setEnabled(true);
            numChildTicketsLabel.setEnabled(true);
            childTicketComboBox.setEnabled(true);
            
            adultTicketLabel.setEnabled(false);
            adultTicketPriceTextField.setEnabled(false);
            childTicketLabel.setEnabled(false);
            childTicketPriceTextField.setEnabled(false);
            
            nameTextField.setEnabled(false);
            emailTextField.setEnabled(false);
            ticketDetailsTextField.setEnabled(false);
            
            viewButton.setEnabled(false);
            sellButton.setEnabled(false);
            buyButton.setEnabled(false);
            clearButton.setEnabled(true);
            deleteButton.setEnabled(false);
            
            adultTicketComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8" }));
            
            childTicketComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8" }));
            
            clearFields();
            
        }
        
    }//GEN-LAST:event_hurlingRadioButtonActionPerformed

    private void adultTicketComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adultTicketComboBoxActionPerformed
        
        if (sellRadioButton.isSelected()) {
            
            if (adultTicketComboBox.getSelectedIndex() == 0) {
                
                adultTicketLabel.setEnabled(false);
                adultTicketPriceTextField.setEnabled(false);
                customerNameLabel.setEnabled(false);
                nameTextField.setEnabled(false);
                customerEmailLabel.setEnabled(false);
                emailTextField.setEnabled(false);
                ticketDetailsLabel.setEnabled(false);
                ticketDetailsTextField.setEnabled(false);
                sellButton.setEnabled(false);
                
                adultTicketPriceTextField.setText("");
            
            }
            
            else {
            
                adultTicketLabel.setEnabled(true);
                adultTicketPriceTextField.setEnabled(true);
        
                sellButton.setEnabled(true);
                
            }
        
        }
        
        if (sellRadioButton.isSelected()) {
            
            if (adultTicketComboBox.getSelectedIndex() != 0 && (childTicketComboBox.getSelectedIndex() == 0)) {
                
                if ((!adultTicketPriceTextField.equals(null)) || (!adultTicketPriceTextField.equals(null))) {
                
                    customerNameLabel.setEnabled(true);
                    nameTextField.setEnabled(true);
                    customerEmailLabel.setEnabled(true);
                    emailTextField.setEnabled(true);
                    ticketDetailsLabel.setEnabled(true);
                    ticketDetailsTextField.setEnabled(true);
                    
                    sellButton.setEnabled(true);
                
                }
                
                else {
                    
                    customerNameLabel.setEnabled(false);
                    nameTextField.setEnabled(false);
                    customerEmailLabel.setEnabled(false);
                    emailTextField.setEnabled(false);
                    ticketDetailsLabel.setEnabled(false);
                    ticketDetailsTextField.setEnabled(false);
                
                    buyButton.setEnabled(false);
                    
                }
                
            }
            
        }
        
        if (sellRadioButton.isSelected()) {
            
            if (adultTicketComboBox.getSelectedIndex() == 0 && (childTicketComboBox.getSelectedIndex() != 0)) {
                
                if ((!adultTicketPriceTextField.equals(null)) || (!adultTicketPriceTextField.equals(null))) {
                
                    customerNameLabel.setEnabled(true);
                    nameTextField.setEnabled(true);
                    customerEmailLabel.setEnabled(true);
                    emailTextField.setEnabled(true);
                    ticketDetailsLabel.setEnabled(true);
                    ticketDetailsTextField.setEnabled(true);
                    
                    sellButton.setEnabled(true);
                
                }
                
                else {
                    
                    customerNameLabel.setEnabled(false);
                    nameTextField.setEnabled(false);
                    customerEmailLabel.setEnabled(false);
                    emailTextField.setEnabled(false);
                    ticketDetailsLabel.setEnabled(false);
                    ticketDetailsTextField.setEnabled(false);
                
                    buyButton.setEnabled(false);
                    
                }
                
            }
            
        }
        
        if (buyRadioButton.isSelected()) {
            
            if (adultTicketComboBox.getSelectedIndex() == 0) {
                
                adultTicketPriceTextField.setText("");
                
                customerNameLabel.setEnabled(false);
                nameTextField.setEnabled(false);
                customerEmailLabel.setEnabled(false);
                emailTextField.setEnabled(false);
                ticketDetailsLabel.setEnabled(false);
                ticketDetailsTextField.setEnabled(false);
                
                buyButton.setEnabled(false);
            
            }
            
            else {
        
                customerNameLabel.setEnabled(true);
                nameTextField.setEnabled(true);
                customerEmailLabel.setEnabled(true);
                emailTextField.setEnabled(true);
                ticketDetailsLabel.setEnabled(true);
                ticketDetailsTextField.setEnabled(true);
            
                buyButton.setEnabled(true);
            
            }
        
        }
        
        if (buyRadioButton.isSelected()) {
            
            if (adultTicketComboBox.getSelectedIndex() != 0 && (childTicketComboBox.getSelectedIndex() == 0)) {
                
                if ((!adultTicketPriceTextField.equals(null)) || (!adultTicketPriceTextField.equals(null))) {
                
                    customerNameLabel.setEnabled(true);
                    nameTextField.setEnabled(true);
                    customerEmailLabel.setEnabled(true);
                    emailTextField.setEnabled(true);
                    ticketDetailsLabel.setEnabled(true);
                    ticketDetailsTextField.setEnabled(true);
                
                    buyButton.setEnabled(true);
                
                }
                
                else {
                    
                    customerNameLabel.setEnabled(false);
                    nameTextField.setEnabled(false);
                    customerEmailLabel.setEnabled(false);
                    emailTextField.setEnabled(false);
                    ticketDetailsLabel.setEnabled(false);
                    ticketDetailsTextField.setEnabled(false);
                
                    buyButton.setEnabled(false);
                    
                }
                
            }
            
        }
        
        if (buyRadioButton.isSelected()) {
            
            if (adultTicketComboBox.getSelectedIndex() == 0 && (childTicketComboBox.getSelectedIndex() != 0)) {
                
                if ((!adultTicketPriceTextField.equals(null)) || (!adultTicketPriceTextField.equals(null))) {
                
                    customerNameLabel.setEnabled(true);
                    nameTextField.setEnabled(true);
                    customerEmailLabel.setEnabled(true);
                    emailTextField.setEnabled(true);
                    ticketDetailsLabel.setEnabled(true);
                    ticketDetailsTextField.setEnabled(true);
                
                    buyButton.setEnabled(true);
                    
                }
                
                else {
                    
                    customerNameLabel.setEnabled(false);
                    nameTextField.setEnabled(false);
                    customerEmailLabel.setEnabled(false);
                    emailTextField.setEnabled(false);
                    ticketDetailsLabel.setEnabled(false);
                    ticketDetailsTextField.setEnabled(false);
                
                    buyButton.setEnabled(false);
                    
                }
                
            }
            
        }
        
    }//GEN-LAST:event_adultTicketComboBoxActionPerformed

    private void childTicketComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_childTicketComboBoxActionPerformed
        
        if (sellRadioButton.isSelected()) {
            
            if (childTicketComboBox.getSelectedIndex() == 0) {
                
                childTicketLabel.setEnabled(false);
                childTicketPriceTextField.setEnabled(false);
                customerNameLabel.setEnabled(false);
                nameTextField.setEnabled(false);
                customerEmailLabel.setEnabled(false);
                emailTextField.setEnabled(false);
                ticketDetailsLabel.setEnabled(false);
                ticketDetailsTextField.setEnabled(false);
                sellButton.setEnabled(false);
                
                childTicketPriceTextField.setText("");
            
            }
            
            else {
        
            childTicketLabel.setEnabled(true);
            childTicketPriceTextField.setEnabled(true);
        
            sellButton.setEnabled(true);
            
            }
        
        }
        
        if (sellRadioButton.isSelected()) {
            
            if (adultTicketComboBox.getSelectedIndex() != 0 && (childTicketComboBox.getSelectedIndex() == 0)) {
                
                if ((!adultTicketPriceTextField.equals(null)) || (!adultTicketPriceTextField.equals(null))) {
                
                    customerNameLabel.setEnabled(true);
                    nameTextField.setEnabled(true);
                    customerEmailLabel.setEnabled(true);
                    emailTextField.setEnabled(true);
                    ticketDetailsLabel.setEnabled(true);
                    ticketDetailsTextField.setEnabled(true);
                    
                    sellButton.setEnabled(true);
                
                }
                
                else {
                    
                    customerNameLabel.setEnabled(false);
                    nameTextField.setEnabled(false);
                    customerEmailLabel.setEnabled(false);
                    emailTextField.setEnabled(false);
                    ticketDetailsLabel.setEnabled(false);
                    ticketDetailsTextField.setEnabled(false);
                
                    buyButton.setEnabled(false);
                    
                }
                
            }
            
        }
        
        if (sellRadioButton.isSelected()) {
            
            if (adultTicketComboBox.getSelectedIndex() == 0 && (childTicketComboBox.getSelectedIndex() != 0)) {
                
                if ((!adultTicketPriceTextField.equals(null)) || (!adultTicketPriceTextField.equals(null))) {
                
                    customerNameLabel.setEnabled(true);
                    nameTextField.setEnabled(true);
                    customerEmailLabel.setEnabled(true);
                    emailTextField.setEnabled(true);
                    ticketDetailsLabel.setEnabled(true);
                    ticketDetailsTextField.setEnabled(true);
                    
                    sellButton.setEnabled(true);
                
                }
                
                else {
                    
                    customerNameLabel.setEnabled(false);
                    nameTextField.setEnabled(false);
                    customerEmailLabel.setEnabled(false);
                    emailTextField.setEnabled(false);
                    ticketDetailsLabel.setEnabled(false);
                    ticketDetailsTextField.setEnabled(false);
                
                    buyButton.setEnabled(false);
                    
                }
                
            }
            
        }
        
        if (buyRadioButton.isSelected()) {
            
            if (childTicketComboBox.getSelectedIndex() == 0) {
                
                childTicketPriceTextField.setText("");
                
                customerNameLabel.setEnabled(false);
                nameTextField.setEnabled(false);
                customerEmailLabel.setEnabled(false);
                emailTextField.setEnabled(false);
                ticketDetailsLabel.setEnabled(false);
                ticketDetailsTextField.setEnabled(false);
                
                buyButton.setEnabled(false);
            
            }
            
            else {
        
                customerNameLabel.setEnabled(true);
                nameTextField.setEnabled(true);
                customerEmailLabel.setEnabled(true);
                emailTextField.setEnabled(true);
                ticketDetailsLabel.setEnabled(true);
                ticketDetailsTextField.setEnabled(true);
            
                buyButton.setEnabled(true);
            
            }
        
        }
        
        if (buyRadioButton.isSelected()) {
            
            if (adultTicketComboBox.getSelectedIndex() != 0 && (childTicketComboBox.getSelectedIndex() == 0)) {
                
                if ((!adultTicketPriceTextField.equals(null)) || (!adultTicketPriceTextField.equals(null))) {
                
                    customerNameLabel.setEnabled(true);
                    nameTextField.setEnabled(true);
                    customerEmailLabel.setEnabled(true);
                    emailTextField.setEnabled(true);
                    ticketDetailsLabel.setEnabled(true);
                    ticketDetailsTextField.setEnabled(true);
                
                    buyButton.setEnabled(true);
                    
                }
                
                else {
                    
                    customerNameLabel.setEnabled(false);
                    nameTextField.setEnabled(false);
                    customerEmailLabel.setEnabled(false);
                    emailTextField.setEnabled(false);
                    ticketDetailsLabel.setEnabled(false);
                    ticketDetailsTextField.setEnabled(false);
                
                    buyButton.setEnabled(false);
                    
                }
                
            }
            
        }
        
        if (buyRadioButton.isSelected()) {
            
            if (adultTicketComboBox.getSelectedIndex() == 0 && (childTicketComboBox.getSelectedIndex() != 0)) {
                
                if ((!adultTicketPriceTextField.equals(null)) || (!adultTicketPriceTextField.equals(null))) {
                
                    customerNameLabel.setEnabled(true);
                    nameTextField.setEnabled(true);
                    customerEmailLabel.setEnabled(true);
                    emailTextField.setEnabled(true);
                    ticketDetailsLabel.setEnabled(true);
                    ticketDetailsTextField.setEnabled(true);
                
                    buyButton.setEnabled(true);
                
                }
                
                else {
                    
                    customerNameLabel.setEnabled(false);
                    nameTextField.setEnabled(false);
                    customerEmailLabel.setEnabled(false);
                    emailTextField.setEnabled(false);
                    ticketDetailsLabel.setEnabled(false);
                    ticketDetailsTextField.setEnabled(false);
                
                    buyButton.setEnabled(false);
                    
                }
                
            }
            
        }
        
    }//GEN-LAST:event_childTicketComboBoxActionPerformed

    private void adultTicketPriceTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adultTicketPriceTextFieldActionPerformed
        
        if (!adultTicketPriceTextField.equals(null)) {

            customerNameLabel.setEnabled(true);
            nameTextField.setEnabled(true);
            customerEmailLabel.setEnabled(true);
            emailTextField.setEnabled(true);
            ticketDetailsLabel.setEnabled(true);
            ticketDetailsTextField.setEnabled(true);

            viewButton.setEnabled(false);
            sellButton.setEnabled(true);
            buyButton.setEnabled(false);
            clearButton.setEnabled(true);
            deleteButton.setEnabled(false);

        }
        
    }//GEN-LAST:event_adultTicketPriceTextFieldActionPerformed

    private void childTicketPriceTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_childTicketPriceTextFieldActionPerformed
        
        if (!childTicketPriceTextField.equals(null)) {
        
            customerNameLabel.setEnabled(true);
            nameTextField.setEnabled(true);
            customerEmailLabel.setEnabled(true);
            emailTextField.setEnabled(true);
            ticketDetailsLabel.setEnabled(true);
            ticketDetailsTextField.setEnabled(true);
            
            viewButton.setEnabled(false);
            sellButton.setEnabled(true);
            buyButton.setEnabled(false);
            clearButton.setEnabled(true);
            deleteButton.setEnabled(false);
            
        }
        
    }//GEN-LAST:event_childTicketPriceTextFieldActionPerformed

    private void nameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameTextFieldActionPerformed
        
        /*if ((!nameTextField.equals(null)) && (!emailTextField.equals(null))) {

            // When the sell tickets radio button is selected it makes the adult and child ticket price labels and text fields visible
            adultTicketLabel.setVisible(true);
            adultTicketPriceTextField.setVisible(true);

            childTicketLabel.setVisible(true);
            childTicketPriceTextField.setVisible(true);

            // When the sell tickets radio button is selected it enables the radio buttons for football and hurling and both combo boxes

            footballRadioButton.setEnabled(true);
            hurlingRadioButton.setEnabled(true);

            adultTicketComboBox.setEnabled(true);
            childTicketComboBox.setEnabled(true);

            nameTextField.setEnabled(true);
            emailTextField.setEnabled(true);

            searchButton.setEnabled(false);
            sellButton.setEnabled(true);
            buyButton.setEnabled(false);
            clearButton.setEnabled(true);
            deleteButton.setEnabled(false);
            
        }*/
        
    }//GEN-LAST:event_nameTextFieldActionPerformed

    private void emailTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailTextFieldActionPerformed
        
        /*if ((!nameTextField.equals(null)) && (!emailTextField.equals(null))) {

            // When the sell tickets radio button is selected it makes the adult and child ticket price labels and text fields visible
            adultTicketLabel.setVisible(true);
            adultTicketPriceTextField.setVisible(true);

            childTicketLabel.setVisible(true);
            childTicketPriceTextField.setVisible(true);

            // When the sell tickets radio button is selected it enables the radio buttons for football and hurling and both combo boxes

            footballRadioButton.setEnabled(true);
            hurlingRadioButton.setEnabled(true);

            adultTicketComboBox.setEnabled(true);
            childTicketComboBox.setEnabled(true);

            nameTextField.setEnabled(true);
            emailTextField.setEnabled(true);

            searchButton.setEnabled(false);
            sellButton.setEnabled(true);
            buyButton.setEnabled(false);
            clearButton.setEnabled(true);
            deleteButton.setEnabled(false);
            
        }*/
        
    }//GEN-LAST:event_emailTextFieldActionPerformed

    private void ticketDetailsTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ticketDetailsTextFieldActionPerformed
        
        
        
    }//GEN-LAST:event_ticketDetailsTextFieldActionPerformed

    private void viewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewButtonActionPerformed
        
        FileReader fileReader;
        BufferedReader bufferedReader;
        
        String name;
        String email;
        String ticketType;
        
        int totalAdultTickets;
        int totalChildTickets;
        
        int adultTicketPrice;
        int childTicketPrice;
        
        String ticketDetails;
        
        Tickets sell;
        
        for (int i = 0; i<tickets.size(); i++) {
            
            sell = tickets.get(i);
            name = sell.getName();
            email = sell.getEmail();
            ticketType = sell.getTicketType();
            totalAdultTickets = sell.getNumAdultFootballTickets() + sell.getNumAdultHurlingTickets();
            totalChildTickets = sell.getNumChildFootballTickets() + sell.getNumChildHurlingTickets();
            adultTicketPrice = sell.getAdultTicketPrice();
            childTicketPrice = sell.getChildTicketPrice();
            ticketDetails = sell.getTicketDetails();
            
            JOptionPane.showMessageDialog(null, "Ticket details.\nSeller Name: " + name + ".\nSeller Email: " + email + ".\nType Of Ticket: " + ticketType + 
                                                ".\nNumber Of Adult Tickets: " + totalAdultTickets + ".\nAdult Ticket Price: €" + adultTicketPrice +
                                                ".\nNumber Of Child Tickets: " + totalChildTickets + ".\nChild Ticket Price: €" + childTicketPrice +
                                                ".\nAdditional Information: " + ticketDetails + ".");
        
        }
        
        String fileName = "tickets.txt";
        String line;

        try {
            
            fileReader = new FileReader("tickets.txt");

            bufferedReader = new BufferedReader(fileReader);

            while((line = bufferedReader.readLine()) != null) {
                
                System.out.println(line);
                
            }   

            bufferedReader.close();   
            
        }
        
        catch(FileNotFoundException ex) {
            
            System.out.println("Unable to open file '" + fileName + "'");  
            
        }
        
        catch(IOException ex) {
            
            System.out.println("Error reading file '" + fileName + "'");
        
        }
            
    }//GEN-LAST:event_viewButtonActionPerformed

    private void sellButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sellButtonActionPerformed
        
        File outFile;
        FileWriter fileWriter;
        BufferedWriter bufferedWriter;
        
        String name;
        String email;
        String action;
        String ticketType = "";
        
        int numAdultFootballTickets;
        int numChildFootballTickets;
        int numAdultHurlingTickets;
        int numChildHurlingTickets;
        
        int adultTicketPrice;
        int childTicketPrice;
        
        double maxAdultPrice = 50;
        double maxChildPrice = 30;
        
        String ticketDetails;
        
        name = nameTextField.getText();
        email = emailTextField.getText();
        
        numAdultFootballTickets = adultTicketComboBox.getSelectedIndex();
        numChildFootballTickets = childTicketComboBox.getSelectedIndex();
        
        adultTicketPrice = Integer.parseInt(adultTicketPriceTextField.getText());
        childTicketPrice = Integer.parseInt(childTicketPriceTextField.getText());
        
        ticketDetails = ticketDetailsTextField.getText();

        /* This if else statement checks to see if the numbers that the user has entered into
         * the adult ticket price and child ticket price text fields
         * are higher than then the max prices that we have set
         * If either of the numbers or both of the numbers are higher then it displays an error message.
         */
        
        if ((Integer.parseInt(adultTicketPriceTextField.getText()) > maxAdultPrice) && (Integer.parseInt(childTicketPriceTextField.getText()) > maxChildPrice)) {
                
            JOptionPane.showMessageDialog(null, "The prices you want to sell both an adults ticket and a childs tickets for are higher than face value.\n"
                                                + "Please enter new prices.");
                
        }
        
        else if (Integer.parseInt(adultTicketPriceTextField.getText()) > maxAdultPrice) {
                
            JOptionPane.showMessageDialog(null, "The price you want to sell an adult ticket for is higher than face value.\n"
                                                + "Please enter another price.");
                
        }
        
        else if (Integer.parseInt(childTicketPriceTextField.getText()) > maxChildPrice) {
            
            JOptionPane.showMessageDialog(null, "The price you want to sell a childs ticket for is higher than face value.\n"
                                                + "Please enter another price.");
            
        }
        
        else {
            
            if (name.equals("") && email.equals("")) {
            
                JOptionPane.showMessageDialog(null, "You did not enter a name and an email address.");
                
            }
            
            else if (name.equals("")) {
            
            JOptionPane.showMessageDialog(null, "You did not enter a name.");
            
            }
        
            else if (email.equals("")) {
            
                JOptionPane.showMessageDialog(null, "You did not enter an email address.");
            
            }
        
            else {
            
                JOptionPane.showMessageDialog(null, "Thank you for entering all of your details.");
            
                if (sellRadioButton.isSelected()) {
            
                    if (footballRadioButton.isSelected()) {
                
                        action = "sell";
                        ticketType = "Football";
                        numAdultFootballTickets = adultTicketComboBox.getSelectedIndex();
                        numChildFootballTickets = childTicketComboBox.getSelectedIndex();
                        ticketDetails = ticketDetailsTextField.getText();
                
                        JOptionPane.showMessageDialog(null, "Thank you " + name + ".\nThe number of adult football tickets you would like to sell is " + numAdultFootballTickets + " at €" + adultTicketPrice + 
                                                        " per ticket.\nThe number of child football tickets you would like to sell is " + numChildFootballTickets + " at €" + childTicketPrice + " per ticket.\nTicket details: " + ticketDetails + ".");
                
                        /* These lines of code create a new instance of the Tickets class and then pass in the values stored
                         * in name, email, action, ticketType, numAdultFootballTickets, numChildFootballTickets to the variables of the same name in the Tickets class
                         * The Tickets object that we have just created is then added into our array list
                         * The ticketList variable is then incremented by 1.
                         */
                    
                        Tickets sell = new Tickets(name, email, action, ticketType, numAdultFootballTickets, numChildFootballTickets, adultTicketPrice, childTicketPrice, ticketDetails);
                        tickets.add(sell);
                        ticketList++;
                    
                    }
            
                }
            
                if (sellRadioButton.isSelected()) {
            
                    if (hurlingRadioButton.isSelected()) {
                
                        action = "sell";
                        ticketType = "Hurling";
                        numAdultHurlingTickets = adultTicketComboBox.getSelectedIndex();
                        numChildHurlingTickets = childTicketComboBox.getSelectedIndex();
                
                        JOptionPane.showMessageDialog(null, "Thank you " + name + ".\nThe number of adult hurling tickets you would like to sell is " + numAdultHurlingTickets + " at €" + adultTicketPrice + 
                                                        " per ticket.\nThe number of child hurling tickets you would like to sell is " + numChildHurlingTickets + " at €" + childTicketPrice + " per ticket.\nTicket details: " + ticketDetails + ".");
                
                        /* These lines of code create a new instance of the Tickets class and then pass in the values stored
                         * in name, email, action, ticketType, numAdultHurlingTickets, numChildHurlingTickets to the variables of the same name in the Tickets class
                         * The Tickets object that we have just created is then added into our array list
                         * The ticketList variable is then incremented by 1.
                         */
                    
                        Tickets sell = new Tickets(name, email, action, ticketType, numAdultHurlingTickets, numChildHurlingTickets, adultTicketPrice, childTicketPrice, ticketDetails);
                        tickets.add(sell);
                        ticketList++;
                
                    }
            
                }
        
            }
        
            /* This if statement checks to see if both the name and email text fields are filled in
             * If both are filled in then it resets everything
             */
        
            if (!name.equals("") && !email.equals("")) {
            
                clearFields();
            
                buttonGroup1.clearSelection();
                buttonGroup2.clearSelection();
            
                adultTicketComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0" }));
            
                childTicketComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0" }));
            
                adultTicketLabel.setVisible(false);
                adultTicketPriceTextField.setVisible(false);
            
                childTicketLabel.setVisible(false);
                childTicketPriceTextField.setVisible(false);
            
                footballRadioButton.setEnabled(false);
                hurlingRadioButton.setEnabled(false);
            
                numAdultTicketsLabel.setEnabled(false);
                adultTicketComboBox.setEnabled(false);
                numChildTicketsLabel.setEnabled(false);
                childTicketComboBox.setEnabled(false);
            
                customerNameLabel.setEnabled(false);
                nameTextField.setEnabled(false);
                customerEmailLabel.setEnabled(false);
                emailTextField.setEnabled(false);
                ticketDetailsLabel.setEnabled(false);
                ticketDetailsTextField.setEnabled(false);
            
                viewButton.setEnabled(false);
                sellButton.setEnabled(false);
                buyButton.setEnabled(false);
                clearButton.setEnabled(false);
                deleteButton.setEnabled(false);
        
            }
        
            try {
            
                // This code writes the informtion that has just been stored into a text file
                
                outFile = new File("tickets.txt");
                fileWriter = new FileWriter(outFile, true);
                bufferedWriter = new BufferedWriter(fileWriter);

                bufferedWriter.write("Customer Name: " + name + ".");
                bufferedWriter.newLine();
                bufferedWriter.write("Email Address: " + email  + ".");
                bufferedWriter.newLine();
                bufferedWriter.write("Ticket Type: " + ticketType + ".");
                bufferedWriter.newLine();
                bufferedWriter.write("Number Of Adult Tickets: " + numAdultFootballTickets + ".");
                bufferedWriter.newLine();
                bufferedWriter.write("Number Of Child Tickets: " + numChildFootballTickets + ".");
                bufferedWriter.newLine();
                bufferedWriter.write("Adult Ticket Price: €" + adultTicketPrice + ".");
                bufferedWriter.newLine();
                bufferedWriter.write("Child Ticket Price: €" + childTicketPrice + ".");
                bufferedWriter.newLine();
                bufferedWriter.write("Ticket Details: " + ticketDetails + ".");
                bufferedWriter.newLine();
                bufferedWriter.newLine();
                bufferedWriter.close();
        
            }
        
            catch (IOException error) {
            
                JOptionPane.showMessageDialog(null, "Error writing into the file " + error);
        
            }
        
        }
        
    }//GEN-LAST:event_sellButtonActionPerformed

    private void buyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyButtonActionPerformed
        
        String ticketType;
        
        double adultTicketPrice;
        double childTicketPrice;
        double numAdultTickets;
        double numChildTickets;
        double totalAdultTickets;
        double totalChildTickets;
        double totalTicketsCost = 0;
        
        Tickets sell;
        
        if (buyRadioButton.isSelected()) {
            
            if (footballRadioButton.isSelected()) {
                
                for (int i = 0; i<tickets.size(); i++) {
                    
                    sell = tickets.get(i);
                    ticketType = sell.getTicketType();
                    
                    if (ticketType.equals("Football")) {
                        
                        totalAdultTickets = sell.getNumAdultFootballTickets() + sell.getNumAdultHurlingTickets();
                        totalChildTickets = sell.getNumChildFootballTickets() + sell.getNumChildHurlingTickets();
                        
                        adultTicketPrice = sell.getAdultTicketPrice();
                        childTicketPrice = sell.getChildTicketPrice();
                        
                        totalTicketsCost = (totalAdultTickets * adultTicketPrice) + (totalChildTickets * childTicketPrice);
                        
                        JOptionPane.showMessageDialog(null, "Thank you. The total cost of your football tickets is €:" + totalTicketsCost + ".");
                        
                    }
                
                }
            
            }
                
        }
        
        if (buyRadioButton.isSelected()) {
            
            if (hurlingRadioButton.isSelected()) {
                
                for (int i = 0; i<tickets.size(); i++) {
                    
                    sell = tickets.get(i);
                    ticketType = sell.getTicketType();
                    
                    if (ticketType.equals("Hurling")) {
                        
                        totalAdultTickets = sell.getNumAdultFootballTickets() + sell.getNumAdultHurlingTickets();
                        totalChildTickets = sell.getNumChildFootballTickets() + sell.getNumChildHurlingTickets();
                        
                        adultTicketPrice = sell.getAdultTicketPrice();
                        childTicketPrice = sell.getChildTicketPrice();
                        
                        totalTicketsCost = (totalAdultTickets * adultTicketPrice) + (totalChildTickets * childTicketPrice);
                        
                        JOptionPane.showMessageDialog(null, "Thank you. The total cost of your hurling tickets is €:" + totalTicketsCost + ".");
                        
                    }
                
                }
            
            }
                
        }
            
    }//GEN-LAST:event_buyButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        
        // This code sets the visibility of parts of the GUI and sets certain parts of the GUI to be enabled or not enabled when the clear button is clicked
        
        footballRadioButton.setEnabled(false);
        hurlingRadioButton.setEnabled(false);
        
        numAdultTicketsLabel.setEnabled(false);
        adultTicketComboBox.setEnabled(false);
        numChildTicketsLabel.setEnabled(false);
        childTicketComboBox.setEnabled(false);
        
        nameTextField.setEnabled(false);
        emailTextField.setEnabled(false);
        
        viewButton.setEnabled(false);
        sellButton.setEnabled(false);
        buyButton.setEnabled(false);
        clearButton.setEnabled(false);
        deleteButton.setEnabled(false);

        // When the clear button is clicked it resets all of the radio buttons back to unselected
        
        buttonGroup1.clearSelection();
        buttonGroup2.clearSelection();
        
        // When the clear button is clicked it resets the amount of adult and child tickets that can be bought to zero
        
        adultTicketComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0" }));
        
        childTicketComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0" }));
        
        adultTicketLabel.setVisible(false);
        adultTicketPriceTextField.setVisible(false);
        
        childTicketLabel.setVisible(false);
        childTicketPriceTextField.setVisible(false);
        
        // When the clear button is clicked it resets all of the text fields back to empty
        
        clearFields();
        
    }//GEN-LAST:event_clearButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        
        String name;
        String email;
        
        name = nameTextField.getText();
        email = emailTextField.getText();
        
        Tickets sell;
        ticketList = tickets.size();
        
        if (name.equals("") && email.equals("")) {
            
            JOptionPane.showMessageDialog(null, "Enter name and email to delete.");
        }
        
        else if (name.equals("") || email.equals("")) {
            
            JOptionPane.showMessageDialog(null, "Enter name and email to delete.");
        }
        
        else {
            
            JOptionPane.showMessageDialog(null, "Thank you for entering all of the details.");
            
            for (int i=0; i<ticketList; i++){

                sell = tickets.get(i);
                
                if (name.equals(sell.getName()) && (email.equals(sell.getEmail()))) {
                    
                    tickets.remove(i);
                    JOptionPane.showMessageDialog(null,"Deleting seller " + sell.getName() + ", with email address: " + sell.getEmail() + " from list of tickets");
                    break;
                
                }
            
            }
            
        }
        
        buttonGroup1.clearSelection();
        buttonGroup2.clearSelection();
        
        customerNameLabel.setEnabled(false);
        nameTextField.setEnabled(false);
        customerEmailLabel.setEnabled(false);
        emailTextField.setEnabled(false);
        
        viewButton.setEnabled(false);
        clearButton.setEnabled(false);
        deleteButton.setEnabled(false);
        
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        
        int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to exit?", "GaaTickets", JOptionPane.YES_NO_OPTION);
        
        if (confirm == JOptionPane.YES_OPTION) {
            
            System.exit(0);
            
        }
        
    }//GEN-LAST:event_exitButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GaaTicketsApplicationGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GaaTicketsApplicationGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GaaTicketsApplicationGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GaaTicketsApplicationGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GaaTicketsApplicationGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> adultTicketComboBox;
    private javax.swing.JLabel adultTicketLabel;
    private javax.swing.JTextField adultTicketPriceTextField;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JPanel buttonsPanel;
    private javax.swing.JButton buyButton;
    private javax.swing.JPanel buyOrSellPanel;
    private javax.swing.JRadioButton buyRadioButton;
    private javax.swing.JComboBox<String> childTicketComboBox;
    private javax.swing.JLabel childTicketLabel;
    private javax.swing.JTextField childTicketPriceTextField;
    private javax.swing.JButton clearButton;
    private javax.swing.JPanel customerDetailsPanel;
    private javax.swing.JLabel customerEmailLabel;
    private javax.swing.JLabel customerNameLabel;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextField emailTextField;
    private javax.swing.JButton exitButton;
    private javax.swing.JRadioButton footballRadioButton;
    private javax.swing.JRadioButton hurlingRadioButton;
    private javax.swing.JPanel lowerPanel;
    private javax.swing.JLabel mainTitle;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JLabel numAdultTicketsLabel;
    private javax.swing.JLabel numChildTicketsLabel;
    private javax.swing.JPanel numberOfTicketsPanel;
    private javax.swing.JButton sellButton;
    private javax.swing.JRadioButton sellRadioButton;
    private javax.swing.JLabel subtitle1;
    private javax.swing.JLabel subtitle2;
    private javax.swing.JLabel subtitle3;
    private javax.swing.JLabel subtitle4;
    private javax.swing.JLabel ticketDetailsLabel;
    private javax.swing.JTextField ticketDetailsTextField;
    private javax.swing.JPanel titlePanel;
    private javax.swing.JPanel typeOfTicketPanel;
    private javax.swing.JPanel upperPanel;
    private javax.swing.JButton viewButton;
    private javax.swing.JRadioButton viewRadioButton;
    // End of variables declaration//GEN-END:variables
}
